# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
styles:
    tools:
        texcoords: true
        shaders:
            blocks:
                global: |
                    // GridTile
                    //=============================
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                    // Random
                    //=============================
                    float random(float x){ return fract(sin(x)*43758.5453);}
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    //  Grid
                    //=============================
                    float grid(vec2 st, float res){
                        vec2 grid = fract(st*res);
                        return 1.0-(step(0.005*res,grid.x) * step(0.005*res,grid.y));
                    }
                position: |
                    // GridTile
                    v_pos = a_position;
    roads:
        base: lines
        mix: tools
        animated: true
        shaders:
            blocks:
                global: |
                    float randomSerie(float x, float freq, float t) {
                        return step(.8,random( floor(x*freq)-floor(t) ));
                    }
                color: |
                    vec2 st = v_texcoord.xy;
                    float freq = random(floor(u_time))+random(floor(u_tile_origin.xy*.001))+abs(atan(u_time)*0.1);
                    float t = 60.+u_time*(1.0-freq)*100.;
                    if ( v_color.r < 0.5) {
                        float cols = 2.;
                        if (fract(st.x*cols* 0.5) < 0.5){
                            t *= -1.0;
                        }
                    }
                    freq += random(floor(st.x));
                    float offset = 0.025;
                    color.r = randomSerie(st.y, freq*100., t+offset);
                    color.g = randomSerie(st.y, freq*100., t);
                    color.b = randomSerie(st.y, freq*100., t-offset);
                    color.rgb *= step(0.1,st.x)-step(0.9,st.x);
    grid:
        base: polygons
        mix: tools
        animated: false
        shaders:
            blocks:
                global: |
                    bool TileGrid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    vec3 TileGrid(float res){
                        vec2 st = TileCoords()*100.*res;
                        vec3 pct = vec3(0.0);
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (TileGrid(st,0.01,press)) pct += vec3(0.5,0.,0.);
                        if (TileGrid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    vec3 TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                color: |
                    vec3 grid = TileGrid();
                    color.rgb = mix(vec3(0.031,0.047,0.035),color.rgb,grid);
    buildings:
        base: polygons
        mix: tools
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float pattern(vec2 st, vec2 v, float t) {
                        vec2 p = floor(st+v);
                        return step(t, random(100.+p*.000001)+random(p.x)*0.5 );
                    }
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    if (dot(v_normal,vec3(0.,0.,1.)) == 0.){
                        float r = random(color.gb);
                        float amount = 0.5+random(color.rg)*0.5;
                        
                        vec2 st = vec2(v_texcoord.x,v_world_position.z*0.005); 
                        if ( r > .3) {
                            // Grid
                            vec2 grid = vec2(100.0,50.);
                            st *= grid;

                            vec2 ipos = floor(st);

                            vec2 vel = floor(vec2(u_time*10.)); // time
                            vel *= vec2(-1.,0.); // direction

                            vel *= (step(1., mod(ipos.y,2.0))-0.5)*2.; // Oposite directions
                            vel *= random(ipos.y); // random speed

                            // 100%
                            float totalCells = grid.x*grid.y;
                            float t = mod(10.+u_time*2.*max(grid.x,grid.y),totalCells);
                            vec2 head = vec2(mod(t,grid.x), floor(t/grid.x));

                            vec2 offset = vec2(0.1,0.);
                            float pct = 1.0;
                            pct *= step(grid.y-head.y,ipos.y);// Y
                            pct += (1.0-step(head.x,ipos.x))*step(grid.y-head.y,ipos.y+1.);   // X
                            pct = clamp(pct,0.,1.);
                            color.rgb = vec3(pct);
                            
                            // Assign a random value base on the integer coord
                            color.r *= random(floor(st+vel+offset));
                            color.g *= random(floor(st+vel));
                            color.b *= random(floor(st+vel-offset));

                            color.rgb = smoothstep(0.,amount,color.rgb*color.rgb);

                            //  Margin
                            color.rgb *= step(.1,fract(st.x+vel.x))*step(.1,fract(st.y+vel.y));
                        } else {
                            vec2 grid = vec2(100.0,50.);
                            st *= grid;

                            vec2 ipos = floor(st);  // integer
                            vec2 fpos = fract(st);  // fraction

                            vec2 vel = vec2(u_time*2.*max(grid.x,grid.y)); // time
                            vel *= vec2(-1.,0.0) * random(1.0+ipos.y); // direction

                            // Assign a random value base on the integer coord
                            vec2 offset = vec2(0.1,0.);

                            color.r = pattern(st+offset,vel,amount);
                            color.g = pattern(st,vel,amount);
                            color.b = pattern(st-offset,vel,amount);
                            color.rgb *= step(0.2,fpos.y);
                        }
                    } else {
                        color.rgb = vec3(0.);
                    }
                    
    buildingsLines:
        base: lines
        mix: tools
        lighting: false
        texcoords: true
        shaders:
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
sources:
    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?
layers:
    earth:
        data: { source: osm }
        draw:
            grid:
                order: 0
                color: [0.362,0.362,0.362]
    landuse:
        data: { source: osm }
        draw:
            lines:
                order: 1
                color: [0.703,0.703,0.703]
                width: 1px
    water:
        data: { source: osm }
        draw:
            grid:
                order: 3
                color: [1.000,1.000,1.000]
            outline:
                order: 2
                style: lines
                color: [1.000,1.000,1.000]
                width: 2px
                tile_edges: false
    roads:
        data: { source: osm }
        filter: { not: { highway: service, kind: rail } }
        draw:
            roads:
                order: 5
                color: [0, 0, 0]
                width: 8
            outline:
                style: lines
                order: 4
                color: [0.773,0.763,0.763]
                width: 8.5
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: 7
                color: Style.color.pseudoRandomColor()
        3d-buildings:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 8
                    color: [0.687,0.660,0.660]
                    width: .5px
                    extrude: true