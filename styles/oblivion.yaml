# Author @patriciogv - 2015

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .5
        ambient: .5
styles:
    tilt:
        animated: true
        shaders:
            blocks:
                global: |
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                position: |
                    float t = u_time*0.05; 
                    position.xyz = rotateX3D(abs(cos(t))) * position.xyz;
    overlay_grid:
        shaders:
            blocks:
                global: |
                    float random(in float x){ return fract(sin(x)*43758.5453); }
                    float random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }

                    float bin(vec2 ipos, float n){
                        float remain = mod(n,33554432.);
                        for(float i = 0.0; i < 25.0; i++){
                            if ( floor(i/3.) == ipos.y && mod(i,3.) == ipos.x ) {
                                return step(1.0,mod(remain,2.));
                            }
                            remain = ceil(remain/2.);
                        }
                        return 0.0;
                    }

                    float char(vec2 st, float n){
                        st.x = st.x*2.-0.5;
                        st.y = st.y*1.2-0.1;

                        vec2 grid = vec2(3.,5.);

                        vec2 ipos = floor(st*grid);
                        vec2 fpos = fract(st*grid);

                        n = floor(mod(n,10.));
                        float digit = 0.0;
                        if (n < 1. ) { digit = 31600.; }
                        else if (n < 2. ) { digit = 9363.0; }
                        else if (n < 3. ) { digit = 31184.0; }
                        else if (n < 4. ) { digit = 31208.0; }
                        else if (n < 5. ) { digit = 23525.0; }
                        else if (n < 6. ) { digit = 29672.0; }
                        else if (n < 7. ) { digit = 29680.0; }
                        else if (n < 8. ) { digit = 31013.0; }
                        else if (n < 9. ) { digit = 31728.0; }
                        else if (n < 10. ) { digit = 31717.0; }
                        float pct = bin(ipos, digit);

                        vec2 borders = vec2(1.);
                        // borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   // inner
                        borders *= step(0.0,st)*step(0.0,1.-st);            // outer

                        return step(.5,1.0-pct) * borders.x * borders.y;
                    }

                    float gridF(vec2 st, float res){
                        vec2 grid = fract(st*res);
                        return 1.-(step(0.005,grid.x) * step(0.005,grid.y));
                    }

                    float box(in vec2 st, in vec2 size){
                        size = vec2(0.5) - size*0.5;
                        vec2 uv = smoothstep(size,
                                            size+vec2(0.001),
                                            st);
                        uv *= smoothstep(size,
                                        size+vec2(0.001),
                                        vec2(1.0)-st);
                        return uv.x*uv.y;
                    }

                    float cross(in vec2 st, vec2 size){
                        return  clamp(box(st, vec2(size.x*0.5,size.y*0.125)) +
                                box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);
                    }
                filter: |
                    vec2 xy = gl_FragCoord.xy/u_resolution.xy;
                    xy.x *= u_resolution.x/u_resolution.y;
                    xy *= 2.;
                    
                    vec3 overlayGrid = vec3(0.0);
                    
                    // Grid
                    vec2 grid_xy = xy*300.;
                    overlayGrid += vec3(0.620,0.722,0.694)*gridF(grid_xy,0.01)*0.5;
                    overlayGrid += vec3(0.620,0.722,0.694)*gridF(grid_xy,0.02)*0.25;
                    // overlayGrid += vec3(0.2)*gridF(grid_xy,0.1);
                    overlayGrid *= .5;

                    // // Crosses
                    vec2 crosses_xy = xy + .5;
                    crosses_xy *= 3.;
                    vec2 crosses_xy_f = fract(crosses_xy);
                    overlayGrid *= 1.-cross(crosses_xy_f,vec2(.2,.2));
                    overlayGrid += vec3(1.000,.7,0.)*cross(crosses_xy_f,vec2(.08,.08));

                    // // Digits
                    vec2 digits_xy = mod(xy*90.,30.);
                    vec2 digits_xy_i = floor(digits_xy);
                    if (digits_xy_i.y == 1. &&
                        digits_xy_i.x > 0. && digits_xy_i.x < 8. ) {
                        vec2 digits_xy_f = fract(digits_xy);
                        float x = u_tile_origin.y;//+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_xy_i.x);
                        // float pct = random(digits_xy_i+floor(crosses_xy)+floor(u_time*20.));
                        overlayGrid += vec3(0.620,0.722,0.694)*char(digits_xy_f,100.*pct);
                    } else if (digits_xy_i.y == 2. &&
                        digits_xy_i.x > 0. && digits_xy_i.x < 6. ) {
                        vec2 digits_xy_f = fract(digits_xy);
                        float x = u_tile_origin.x;//+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_xy_i.x);
                        // float pct = random(digits_xy_i+floor(crosses_xy)+floor(u_time*20.));
                        overlayGrid += vec3(0.620,0.722,0.694)*char(digits_xy_f,100.*pct);
                    }
                    color.rgb += overlayGrid*.4;
    grain:
        shaders:
            blocks:
                global: |
                    float hatch(vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);
                        float a = hatch(i);
                        float b = hatch(i + vec2(1.0, 0.0));
                        float c = hatch(i + vec2(0.0, 1.0));
                        float d = hatch(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    float grain(vec2 pos){
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                filter: |
                    color.rgb -= grain(gl_FragCoord.xy)*0.3;
                    
    lin:
        base: lines
        mix: [tilt,overlay_grid,grain]
    pol:
        base: polygons
        mix: [tilt,overlay_grid,grain]
    flat:
        base: polygons
        mix: [overlay_grid,grain]
        shaders:
            blocks: 
                position: 
                    position.z = -3000.;
                    position.xy *= 100.;
    water:
        base: polygons
        mix: pol
        animated: true
        material:
            ambient: [0.812, 0.812, 0.812]
            diffuse:
                texture: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/sem-sky-0001.jpg
                mapping: spheremap
        shaders:
            blocks:
                global: |
                        vec3 random3(vec3 c) {
                            float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                            vec3 r;
                            r.z = fract(512.0*j);
                            j *= .125;
                            r.x = fract(512.0*j);
                            j *= .125;
                            r.y = fract(512.0*j);
                            return r-0.5;
                        }

                        const float F3 =  0.3333333;
                        const float G3 =  0.1666667;
                        float snoise(vec3 p) {

                            vec3 s = floor(p + dot(p, vec3(F3)));
                            vec3 x = p - s + dot(s, vec3(G3));

                            vec3 e = step(vec3(0.0), x - x.yzx);
                            vec3 i1 = e*(1.0 - e.zxy);
                            vec3 i2 = 1.0 - e.zxy*(1.0 - e);

                            vec3 x1 = x - i1 + G3;
                            vec3 x2 = x - i2 + 2.0*G3;
                            vec3 x3 = x - 1.0 + 3.0*G3;

                            vec4 w, d;

                            w.x = dot(x, x);
                            w.y = dot(x1, x1);
                            w.z = dot(x2, x2);
                            w.w = dot(x3, x3);

                            w = max(0.6 - w, 0.0);

                            d.x = dot(random3(s), x);
                            d.y = dot(random3(s + i1), x1);
                            d.z = dot(random3(s + i2), x2);
                            d.w = dot(random3(s + 1.0), x3);

                            w *= w;
                            w *= w;
                            d *= w;

                            return dot(d, vec4(52.0));
                        }
                normal: |
                    normal += snoise(vec3(v_world_position.xy*0.08,u_time*.5))*0.02;
                    
    buildings:
        base: polygons
        mix: pol
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.001 + .5),1.));
                    

    area:
        base: polygons
        mix: pol
        lighting: false
        blend: inlay
        shaders:
            blocks:
                global: |
                    mat2 rotate2d(float angle){
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    float stripes(vec2 st){
                        st = rotate2d(3.14159265358*-0.25 )*st;
                        return step(.9,1.0-smoothstep(.5,1.,abs(sin(st.x*3.14159265358))));
                    }
                color: |
                    const float pixel_scale = 695.;
                    float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                    vec2 st = gl_FragCoord.xy/pixel_scale;
                    const float dot_wrap = 1000.;
                    st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                    
                    color = mix(color,vec4(0.),stripes(st*100.))*.8;
                    
sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
layers:
    water:
        data: { source: osm }
        draw:
            water:
                order: 3
                color: [0.910, 0.910, 0.910]
            flat:
                order: 0
                color: [0.129, 0.129, 0.129]
    earth:
        data: { source: osm }
        draw:
            pol:
                order: 1
                color: [0.348,0.348,0.348]
            flat:
                order: 0
                color: [0.129, 0.129, 0.129]
    landuse:
        data: { source: osm }
        draw:
            area:
                order: 2
                color: [1.000,0.014,0.187]
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            polygons:
                order: 5
                color: '#999'
        extruded:
            filter: { $zoom: { min: 10 } }
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }
    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            lin:
                order: 4
                color: '#777'
                width: 5