# Author @patriciogv - 2015

import:
    - http://tangrams.github.io/blocks/generative/random.yaml
    - http://tangrams.github.io/blocks/space/tile.yaml
    - http://tangrams.github.io/blocks/geometry/normal.yaml
    - http://tangrams.github.io/blocks/geometry/matrices.yaml
    - http://tangrams.github.io/blocks/color/tools.yaml
    - http://tangrams.github.io/blocks/tiling/tile.yaml
    - http://tangrams.github.io/blocks/tiling/brick.yaml
    - http://tangrams.github.io/blocks/shapes/circle.yaml
    - http://tangrams.github.io/blocks/functions/aastep.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

cameras:
    cam:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    dir:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .3
    pnt:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .3

global:
    order: function () { return feature.sort_key; }
    pseudoRandomColor: |
        function() {
            return [
                0.7 * (parseInt(feature.id, 16) / 100 % 1),     // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 10000 % 1),   // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

layers:
    earth:
        data: { source: osm }
        draw:
            plain:
                order: global.order
                color: '#ddeeee'
            outline:
                order: global.order
                style: lines
                color: [0.204,0.204,0.204]
                width: 2
    landuse:
        data: { source: osm }
        draw:
            plain:
                order: global.order
                color: '#aaffaa'
            outline:
                order: global.order
                style: lines
                color: [0.204,0.204,0.204]
                width: 2

    water:
        data: { source: osm }
        draw:
            polygons:
                order: global.order
                color: '#343434'
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            lines:
                order: global.order
                color: '#343434'
                width: 8
            outline:
                order: global.order
                style: lines
                color: '#FDF5E6'
                width: 10
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    color: '#343434'
                    width: 12
                outline:
                    color: '#FDF5E6'
                    width: 14
        tunnel:
            filter: { is_tunnel: yes }
            draw:
                lines:
                    color: '#343434'
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    color: '#343434'
                    width: 5
                outline:
                    color: '#FDF5E6'
                    width: 6
        path:
            filter:
                kind: path
            draw:
                lines:
                    color: '#343434'
                    width: 3
                outline:
                    color: '#FDF5E6'
                    width: 4
        labels:
            filter: { name: true, $zoom: { min: 14 } }
            draw:
                text:
                    font:
                        family: Helvetica
                        size: 14px
                        fill: [1.000,0.968,0.968]
                        stroke: { color: [0.204,0.204,0.204] , width: 3  }
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: global.order
                color: global.pseudoRandomColor
                extrude: true
            outline:
                style: lines
                order: global.order
                color: white
                width: [[12, .1px], [14, 1px], [15, 2px], [17, 5px], [18, 10px]]
            buildings-lines:
                order: function () { return feature.sort_key + 1; }
                color: white
                width: [[12, .1px], [14, 1px], [15, 2px], [17, 4px], [18, 5px]]
                extrude: true
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    family: Helvetica
                    size: 20px
                    weight: bold
                    fill: [0.204,0.204,0.204]
                    stroke: { color: white , width: 4 }

styles:
    patterns:
        mix: [space-tile, geometry-matrices, functions-aastep]
        material:
            ambient: 1
            diffuse: 1
        shaders:
            blocks:
                global: |
                    float stripes(vec2 st, float angle, float width){
                        st = rotate2D(angle) * (st*20.);
                        return aastep(width, abs(sin(st.x*3.1415)));
                    }
    plain:
        base: polygons
        mix: patterns
        material:
            ambient: .9
            diffuse: 1.
        shaders:
            blocks:
                color: |
                    vec2 st = getTileCoords()*1.768;
                    float pattern = stripes(st, 0.785375, .5);
                    color.rgb = mix(vec3(0.704), vec3(1.000,0.968,0.908), pattern);
    buildings:
        base: polygons
        mix: [patterns, color-tools, generative-random, shapes-circle, tiling-brick, tiling-tile, geometry-normal]
        texcoords: true
        shaders:
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    vec2 st = vec2(v_texcoord.x,worldPosition().z*0.01);
                    float b = 0.1+random(getBrightness(color.rgb))*.9;
                    float pattern = 0.0;
                    if (b > 0.9){
                        if( !isWall() ){
                            st = fract(worldPosition().xy*0.1);
                        } else {
                            st = tile(st,3.);
                        }
                        pattern = circle(st,0.2);
                    } else if (b > 0.8){
                        if( !isWall() ){
                            st = fract(worldPosition().xy*0.05);
                            st = brick(st, 2.);
                        } else {
                            st = brick(st, 5.);
                        }
                        pattern = 1.0-circle(st,0.1);
                    } else {
                        if( !isWall() ){
                            st = v_texcoord.xy;
                        } else {
                            st *= 0.5;
                        }
                        float gradient = floor(b*10.)*0.1;
                        float angle = 3.1415 * gradient;
                        pattern = stripes(st,angle,gradient);
                    }
                    color.rgb = mix(vec3(0.204,0.204,0.204),vec3(1.000,0.968,0.908),pattern);
    buildings-lines:
        base: lines
        mix: patterns
        texcoords: true
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    vec2 st = v_texcoord.xy;
                    color.rgb = mix(vec3(0.204,0.204,0.204),vec3(1.000,0.968,0.908),smoothstep(0.4,0.5,st.x));
