# Author @patriciogv - 2015

import:
    - http://tangrams.github.io/blocks/generative/random.yaml
    - http://tangrams.github.io/blocks/tiling/tile.yaml
    - http://tangrams.github.io/blocks/geometry/normal.yaml
    - http://tangrams.github.io/blocks/color/tools.yaml
    - http://tangrams.github.io/blocks/shapes/circle.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

cameras:
    cam:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    dir:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    pnt:
        type: point
        position: [0, 0, 400px]
        origin: ground
        ambient: .5
        diffuse: .3
        specular: .2

global:
    order: function () { return feature.sort_key; }
    pseudoRandomColor: |
        function() {
            return [
                0.7 * (parseInt(feature.id, 16) / 100 % 1),     // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 10000 % 1),   // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

layers:
    earth:
        data: { source: osm }
        draw:
            floor:
                order: global.order
                color: [0.094,0.573,0.255]
    landuse:
        data: { source: osm }
        draw:
            floor:
                order: global.order
                color: white

    water:
        data:
            source: osm
            layer: water
        draw:
            floor:
                order: global.order
                color: [0.016,0.341,0.651]

    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: gray
                width: 8
            outline:
                order: global.order
                style: roads
        highway:
            filter:
                kind: highway
            draw:
                roads:
                    color: black
                    width: 12
                outline:
                    color: grey
                    width: 15
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                roads:
                    color: black
            rail:
                filter:
                    kind: rail
                draw:
                    roads:
                        width: 0
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    order: global.order
                    color: lightgrey
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    color: black
                    width: 3

        labels:
            filter: { name: true, $zoom: { min: 14 } }
            draw:
                text:
                    font:
                        family: helvetica
                        size: 14px
                        weight: bold
                        fill: white
                        stroke: { color: black , width: 3 }

    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: global.order
                color: global.pseudoRandomColor
                extrude: true
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    family: helvetica
                    size: 18px
                    weight: bold
                    fill: black
                    stroke: { color: white , width: 3 }
styles:
    lego:
        mix: [tiling-tile, generative-random, geometry-normal, color-tools, shapes-circle]
        material:
            ambient: 0.8
            diffuse: 0.8
            specular: 0.4
        shaders:
            blocks:
                global: |
                    float box(vec2 _st, vec2 _size){
                        _size = vec2(0.5)-_size*0.5;
                        vec2 uv = smoothstep(_size-vec2(0.0001),_size,_st);
                        uv *= smoothstep(_size-vec2(0.0001),_size,vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }

                    vec3 legoPattern(inout vec2 st){
                        st *= 5.0;
                        vec3 normal = vec3(0.0);
                        vec2 ivec = floor(st);
                        vec2 fvec = fract(st);
                        vec2 pos = fvec;
                        float index = random(ivec);
                        if(index > 0.5){
                          normal.x = step(0.5,pos.y)*2.-1.;
                          normal *= (1.0-vec3(box(fvec,vec2(1.0,0.95))));
                        } else {
                          normal.y = step(0.5,pos.x)*2.-1.;
                          normal *= (1.0-vec3(box(fvec,vec2(0.95,1.))));
                        }
                        st = fvec;
                        return normal;
                    }
    floor:
        base: polygons
        mix: lego
        shaders:
            blocks:
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
    roads:
        base: lines
        mix: lego
        shaders:
            blocks:
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
    buildings:
        base: polygons
        mix: lego
        shaders:
            blocks:
                normal: |
                    vec2 st = fract(worldPosition().xy*0.0175);
                    normal = legoPattern(st);
                    st = tile(st,2.);
                    vec2 pos = st-0.5;
                    float a = atan(pos.y,pos.x);
                    normal += vec3(cos(a),sin(a),0.)*circle(st,0.4);
                    normal *= 1.0-circle(st,0.26);
                    normal.b = 1.0;
                    if ( isWall() ){
                        // Roofs
                        st = fract(worldPosition().xy*0.0175);
                        float z = worldPosition().z*0.07;
                        pos = st-0.5;
                        if (fract(z * 0.5) > 0.5){
                            normal = worldNormal() + legoPattern(st);
                        } else {
                            normal = worldNormal();
                        }
                        float p = fract(z);
                        float size = 0.92;
                        size = 0.5-size*0.5;
                        normal.z = (smoothstep(size,size+0.0001,p) * smoothstep(size,size+0.0001,1.0-p));
                    }
                color: |
                    float b = random(getBrightness(color.rgb));
                    if (b > 0.8){
                        color.rgb = vec3(0.918,0.196,0.133);
                    } else if(b > 0.6){
                        color.rgb = vec3(0.996,0.835,0.000);
                    } else if(b > 0.4){
                        color.rgb = vec3(0.016,0.341,0.651);
                    } else if(b > 0.2){
                        color.rgb = vec3(0.278,0.341,0.396);
                    } else {
                        color.rgb = vec3(0.400,0.176,0.180);
                    }
                    color *= clamp(0.6+worldPosition().z*0.007,0.,1.);
