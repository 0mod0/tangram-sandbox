# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    HSB:
        shaders:
            blocks:
                global: |
                    vec3 rgb2hsb( in vec3 c ){
                        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                        vec4 p = mix(vec4(c.bg, K.wz), 
                                     vec4(c.gb, K.xy), 
                                     step(c.b, c.g));
                        vec4 q = mix(vec4(p.xyw, c.r), 
                                     vec4(c.r, p.yzx), 
                                     step(p.x, c.r));
                        float d = q.x - min(q.w, q.y);
                        float e = 1.0e-10;
                        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), 
                                    d / (q.x + e), 
                                    q.x);
                    }
                    vec3 hsb2rgb( in vec3 c ){
                        vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                                                 6.0)-3.0)-1.0, 
                                         0.0, 
                                         1.0 );
                        rgb = rgb*rgb*(3.0-2.0*rgb);
                        return c.z * mix(vec3(1.0), rgb, c.y);
                    }
                filter: |
                    vec3 hsb = rgb2hsb(color.rgb);
                    // hue = %100 / Sat = %50 / Bri = %50
                    color.rgb = hsb2rgb(hsb*vec3(1.,0.25,1.));
    water:
        animated: true
        shaders:
            blocks:
                global: |
                        vec3 random3(vec3 c) {
                            float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                            vec3 r;
                            r.z = fract(512.0*j);
                            j *= .125;
                            r.x = fract(512.0*j);
                            j *= .125;
                            r.y = fract(512.0*j);
                            return r-0.5;
                        }
                        const float F3 =  0.3333333;
                        const float G3 =  0.1666667;
                        float snoise(vec3 p) {
                            vec3 s = floor(p + dot(p, vec3(F3)));
                            vec3 x = p - s + dot(s, vec3(G3));
                            vec3 e = step(vec3(0.0), x - x.yzx);
                            vec3 i1 = e*(1.0 - e.zxy);
                            vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                            vec3 x1 = x - i1 + G3;
                            vec3 x2 = x - i2 + 2.0*G3;
                            vec3 x3 = x - 1.0 + 3.0*G3;
                            vec4 w, d;
                            w.x = dot(x, x);
                            w.y = dot(x1, x1);
                            w.z = dot(x2, x2);
                            w.w = dot(x3, x3);
                            w = max(0.6 - w, 0.0);
                            d.x = dot(random3(s), x);
                            d.y = dot(random3(s + i1), x1);
                            d.z = dot(random3(s + i2), x2);
                            d.w = dot(random3(s + 1.0), x3);
                            w *= w;
                            w *= w;
                            d *= w;
                            return dot(d, vec4(52.0));
                        }
    ocean:
        base: polygons
        mix: [water,HSB]
        material:
            ambient: .7
            diffuse:
                texture: imgs/sem-sky-0001.jpg
                mapping: spheremap
        shaders:
            blocks:
                normal: |
                    normal += snoise(vec3(v_world_position.xy*0.08,u_time*.5))*0.02;
    roads:
        base: lines
        mix: [water,HSB]
        texcoords: true
        material:
            normal:
                texture: imgs/normal-0015.jpg
                mapping: planar
                scale: 0.01
            ambient: 1.8
            diffuse: [0.933,0.890,0.839]
            specular: 1.0
        shaders:
            blocks:
                normal: |
                    float pct = sin(v_texcoord.x*3.1415);
                    vec3 waterNormal = v_normal + snoise(vec3(v_world_position.xy*0.1,u_time*.5));
                    normal = mix(normal, waterNormal, pct );
                color: |
                    color.rgb = mix(vec3(.6), vec3(0.400,0.576,0.718), pow(pct,2.));


    sand:
        base: polygons
        mix: HSB
        material:
            normal:
                texture: imgs/normal-0015.jpg
                mapping: planar
                scale: 0.01
            ambient: 0.8
            diffuse: 1
            specular: 0
    wood:
        base: polygons
        mix: HSB
        material:
            normal:
                texture: imgs/normal-0021.jpg
                mapping: uv
            ambient: 0.8
            diffuse: 1
            specular: 0
        shaders:
            blocks:
                global: |
                    mat2 rotate2d(float _angle){
                        return mat2(cos(_angle),-sin(_angle),
                                    sin(_angle),cos(_angle));
                    }
                    float random (in vec2 _st) { 
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))* 
                            43758.5453123);
                    }
                    float noise (in vec2 _st) {
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);

                        // Four corners in 2D of a tile
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);

                        return mix(a, b, u.x) +
                                (c - a)* u.y * (1.0 - u.x) + 
                                (d - b) * u.x * u.y;
                    }
                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        float scale = 20.0;
                        _pos *= scale;
                        _pos = rotate2d( _angle ) * _pos;
                        return smoothstep(0.0,0.5+_brigtness*0.5,abs((sin(_pos.x*3.1415)+_brigtness*2.0))*0.5);//smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                color: |
                    vec3 pos = v_world_position.xyz*0.01;
                    float pattern = getHatch( color.br*20.0+pos.xy+noise(pos.xy)*(2.0*(1.0-color.g)),color.r, noise(color.rg*10.0+v_texcoord) );

                    color.rgb = vec3( mix(vec3(color.r*0.25,color.g*0.133,color.g*0.063), vec3(0.578,0.351,0.171)+color.r,pattern) );
                    color.rgb = mix(vec3(0.2+color.r*0.5,0.1+color.g*0.15,color.b*0.2)*1.5,color.rgb,smoothstep(0.0,color.g,pattern));

sources:
    osm:
        type: TopoJSONTiles
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson

layers:
    earth:
        data:
            source: osm
            layer: earth
        draw:
            sand:
                order: 0
                color: [0.933,0.890,0.839]
    landuse:
        data:
            source: osm
            layer: landuse
        draw:
            sand:
                order: 1
                color: [0.902,0.843,0.757]
                interactive: true

    water:
        data:
            source: osm
            layer: water
        draw:
            ocean:
                order: 2
                color: '#88bbee'

    roads:
        data:
            source: osm
            layer: roads
        draw:
            roads:
                order: 3
                color: [0.710,0.686,0.647]
                width: 8
        highway:
            filter:
                kind: highway
            draw:
                roads:
                    color: [0.784,0.765,0.729]
                    width: 12
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                roads:
                    color: tan
            rail:
                filter:
                    kind: rail
                draw:
                    roads:
                        width: 0
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    color: lightgrey
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    color: pink
                    width: 3
    
    buildings:
        data:
            source: osm
            layer: buildings
        draw:
            wood:
                order: 4
                color: Style.color.pseudoRandomColor()
                extrude: true

    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, $zoom: { min: 14 } }
        draw:
            text:
                order: 5
                font:
                    typeface: 14px Helvetica
                    fill: [1.000,0.968,0.968]
                    stroke: { color: [0.204,0.204,0.204] , width: 3 }
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                order: 6
                font:
                    typeface: 18px Helvetica
                    fill: [0.204,0.204,0.204]
                    stroke: { color: white , width: 4 }