# Author @patriciogv - 2015

import:
    - http://tangrams.github.io/blocks/filter/grain.yaml
    - http://tangrams.github.io/blocks/space/tile.yaml
    - http://tangrams.github.io/blocks/geometry/normal.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

textures:
    sem:
        url: imgs/sem-sky-0001.jpg

scene:
    background:
        color: [0.114, 0.114, 0.114]

cameras:
    cam:
        type: perspective

lights:
    dir:
        type: directional
        direction: [-1.,-1.,-0.5]
        ambient: .3
        diffuse: .5
        specular: 1.
    pnt:
        type: point
        position: [0, -100, 0]
        origin: ground
        ambient: .2
        diffuse: .5
        specular: .4

global:
    order: function () { return feature.sort_key; }

layers:
    earth:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: '#555'
    landuse:
        data: { source: osm }
        draw:
            earth:
                order: global.order
                color: '#666'
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: '#222'
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: global.order
                color: black
                width: 15
        oneway:
            filter: { oneway: yes }
            draw: 
                roads: 
                    order: global.order
                    color: red
                    width: 15
    buildings:
        data: { source: osm }
        offices:
            filter: function(){ return feature.height > 100; }
            draw:
                polygons:
                    order: global.order
                    color: '#999'
                    style: offices
                    extrude: true
        buildings:
            filter: function(){ return feature.height < 100; }
            draw:
                polygons:
                    order: global.order
                    color: '#999'
                    style: buildings
                    extrude: true
styles:
    earth:
        base: polygons
        mix: filter-grain
    landuse:
        base: polygons
        mix: filter-grain
    water:
        base: polygons
        mix: filter-grain
        # animated: true
        # material:
        #     ambient: 0.8
        #     diffuse:
        #         texture: sem
        #         mapping: spheremap
        # shaders: 
        #     blocks: 
        #         normal: |
        #             normal += snoise(vec3(worldPosition().xy*0.08,u_time*.5))*0.03;
    buildings:
        # animated: true
        texcoords: true
        base: polygons
        mix: [filter-grain, geometry-normal]
        material:
            shininess: 1.
            specular: 0.0
            emission: 0.0
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
                    float t = 0.5;//fract(u_time*0.0000005);
                    if (isWall()) {
                        vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        if ( step(0.6,fpos.x)*step(0.4,fpos.y) > 0.0 ){
                            material.specular = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                            material.emission = vec4(0.988,0.983,0.880,1.0) * step(.5,random(ipos+floor(worldNormal().xy*10.0)+t));
                        }
                    }
                filter: |
                    color.rgb += vec3(1.)* min( 1.-(worldPosition().z*.001 + .7) , 0.5 );
    offices:
        texcoords: true
        base: polygons
        mix: [filter-grain, geometry-normal]
        material:
            shininess: 1.
            specular: 0.0
            emission: 0.0
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
                    
                    if (isWall()) {
                        vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        if ( step(0.01,fpos.x)*step(0.1,fpos.y) > 0.0 ){
                            material.specular = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                            material.emission = vec4(0.957,0.988,0.976,1.0) * step(.5,random(ipos*vec2(0.0000001,0.01)+floor(worldNormal().xy*10.0)));
                            material.emission *= vec4(0.988,0.983,0.880,1.0) * step(.5,random(ipos));
                        }
                    }
                filter: |
                    color.rgb += vec3(1.)* min( 1.-(worldPosition().z*.001 + .7) , 0.5 );
    roads:
        animated: true
        texcoords: true
        base: lines
        mix: filter-grain
        material:
            diffuse: .9
            emission: 0.0
        shaders:
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy*vec2(1.,.1));
                    float dir = -0.1;
                    if ( v_color.r < 0.5) {
                       if (st.x < 0.5) {
                         st.y = 1.-st.y;
                       }
                       st.x = fract(st.x*2.0);
                    }
                    float v = u_time*dir;
                    st *= vec2(4.,1.);
                    st += vec2(1.);
                    vec2 ipos = floor(st);
                    vec2 fpos = fract(st);
                    fpos = fpos+vec2(.0,v*random(ipos.x));
                    ipos = floor(fpos*vec2(10.));
                    fpos = fract(fpos*vec2(1.,10.));
                    
                    st = worldPosition().xy*0.04;
                    float n = noise(st);
                    
                    material.emission = vec4(0.957,0.988,0.976,1.0) * max(0.0,(0.7-dot(fpos-.5,fpos-vec2(.5,.9))*3.) * step(0.5,random(ipos.y)));
                    
                    float lineWidth = 0.2;
                    float borders = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    material.emission *= 1.-borders;
                    
                    color.rgb = vec3(0.4)*borders+n;