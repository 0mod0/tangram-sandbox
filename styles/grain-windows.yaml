# Author @patriciogv - 2015

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: ambient
        ambient: .5
        specular: 1.
styles:
    tools:
        base: polygons
        shaders:
            blocks:
                global: |
                    float fade(float z) { return smoothstep(.0,.5,z) - smoothstep(.5,1.,z); }
                    float grid(vec2 pos, float zoom, float lineWidth){
                        pos = fract(pos*zoom);
                        pos += .5;
                        vec2 g = smoothstep(vec2(0.5-lineWidth),vec2(0.5),pos)-smoothstep(vec2(0.5),vec2(0.5+lineWidth),pos);
                        return clamp(g.x+g.y,0.0,1.);
                    }
                    float infinitGrid(vec2 st, float zoom){
                        float grid1 = grid(st,.0000004*pow(2.,floor(zoom/2.)*2.),.05);
                        float grid2 = grid(st,.0000001*pow(2.,floor((zoom+1.)/2.)*2.),.05);
                        return  grid1 * fade(fract(zoom/2.)) + grid2 * fade(fract((zoom+1.)/2.));
                    }
                    float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);
                        float a = hash(i);
                        float b = hash(i + vec2(1.0, 0.0));
                        float c = hash(i + vec2(0.0, 1.0));
                        float d = hash(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    float grain(vec2 pos){
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                    float random(in vec2 st){
                        return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453);
                    }
    grid:
        base: polygons
        mix: tools
        shaders:
            blocks:
                filter: |
                    color.rgb += infinitGrid(worldPosition().xy, u_map_position.z)*0.05;
                    color.rgb -= grain(gl_FragCoord.xy)*0.3;
                    
    buildings:
        texcoords: true
        base: polygons
        mix: tools
        material:
            specular: 0.0
            emission: 0.0
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
                    
                    if (dot(worldNormal(),vec3(0.,0.,1.)) == 0.0){
                        vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        if ( step(0.01,fpos.x)*step(0.1,fpos.y) > 0.0 ){
                            material.specular = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                            material.emission = vec4(0.957,0.988,0.976,1.0) * step(.5,random(ipos*vec2(0.0000001,0.01)+floor(worldNormal().xy*10.0)));
                            material.emission *= vec4(0.988,0.983,0.880,1.0) * step(.5,random(ipos));
                            
                        }
                    }
                filter: |
                    color.rgb += vec3(1.)* min( 1.-(worldPosition().z*.001 + .7) , 0.5 );
                    color.rgb -= grain(gl_FragCoord.xy);
sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
layers:
    water:
        data: { source: osm }
        draw:
            grid:
                order: 2
                color: '#353535'
    earth:
        data: { source: osm }
        draw:
            grid:
                order: 0
                color: '#555'
    landuse:
        data: { source: osm }
        draw:
            grid:
                order: 1
                color: '#666'
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        properties: { width: 3 }
        draw:
            lines:
                order: 2
                color: '#777'
                width: 5
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            polygons:
                order: 50
                color: '#999'
        extruded:
            filter: { $zoom: { min: 10 } }
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }