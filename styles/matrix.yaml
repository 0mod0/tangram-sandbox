# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
styles:
    matrix:
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float random(in float x){
                        return fract(sin(x)*43758.5453);
                    }
                    float random(in vec2 st){
                        return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453);
                    }
                    float noise (in vec2 _st) {
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);

                        // Four corners in 2D of a tile
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);

                        return mix(a, b, u.x) +
                                (c - a)* u.y * (1.0 - u.x) +
                                (d - b) * u.x * u.y;
                    }
                    float randomChar(in vec2 outer,in vec2 inner){
                        float grid = 5.;
                        vec2 margin = vec2(.2,.05);
                        float seed = 23.;
                        vec2 borders = step(margin,inner)*step(margin,1.-inner);
                        return step(.5,random(outer*seed+floor(inner*grid))) * borders.x * borders.y;
                    }
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }
                    float grid (in vec2 _pos, in float _zoom, in float _lineWidth){
                        _pos = fract(_pos*_zoom);
                        vec2 g = smoothstep(vec2(0.5-_lineWidth),vec2(0.5),_pos) -
                                 smoothstep(vec2(0.5),vec2(0.5+_lineWidth),_pos);
                        return clamp(g.x+g.y,0.0,1.0);
                    }
                    float box(in vec2 _st, in vec2 _size){
                        _size = vec2(0.5) - _size*0.5;
                        vec2 uv = smoothstep(_size,
                                            _size+vec2(0.001),
                                            _st);
                        uv *= smoothstep(_size,
                                        _size+vec2(0.001),
                                        vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }
                    float cross(in vec2 _st, float _size){
                        return  box(_st, vec2(_size*0.5,_size*0.125)) +
                                box(_st, vec2(_size*0.125,_size*0.5));
                    }
                    vec2 getConstantPos(vec2 fragCoord){
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = fragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                    }
    roads:
        base: lines
        mix: matrix
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    vec2 rows = vec2(1.,20.);
                    float t = u_time*12.;
                    vec2 ipos = vec2(0.);
                    if ( v_color.r < 0.5) {
                        rows.x = 2.;
                        if (fract(st.x*rows.x * 0.5) < 0.5){
                            t *= -1.0;
                        } 
                    }
                    ipos = floor(st*rows);
                    ipos.y -= floor(t);
                    vec2 fpos = fract(st*rows);
                    vec2 center = (.5-fpos);
                    float pct = random(ipos);
                    float glow = (1.-dot(center,center)*3.)*2.0;
                    color.rgb = vec3(0.757,0.784,0.710) * ( randomChar(ipos,fpos) * pct );
                    color.rgb +=  vec3(0.027,0.180,0.063) * pct * glow;

    grid:
        base: polygons
        mix: matrix
        shaders:
            blocks:
                color: |
                    //vec2 pos = v_world_position.xy*0.01;
                    vec2 pos = getConstantPos(gl_FragCoord.xy)*4.0;
                    float pct = 0.001+noise(pos+u_time)*0.02*random(pos+u_time*0.5);
                    color.rgb = mix(vec3(0.031,0.047,0.035),vec3(0.643,0.851,0.690),grid(pos,10.,pct));

    tiledCross:
        base: polygons
        mix: matrix
        shaders:
            blocks:
                filter: |
                    // vec2 pos = v_world_position.xy*0.01;
                    vec2 pos = getConstantPos(gl_FragCoord.xy)*4.0;
                    float pct = clamp(cross(fract(pos),0.2),0.0,1.0);
                    color.rgb = mix(vec3(0.004,0.051,0.008),vec3(0.173,0.235,0.200),pct);

    buildings:
        base: polygons
        mix: matrix
        blend: add
        shaders:
            blocks:
                filter: |
                    vec3 pos = v_world_position.xyz*0.01;
                    vec2 uv = v_texcoord.xy;
                    float pct = grid(v_texcoord,10.,0.1)*0.5;
                    if ( dot(v_normal,vec3(0.,0.,1.)) == 0.0 ){
                        // Wall
                        vec2 st = v_texcoord.xy;
                        float rows = 30.0;
                        vec2 ipos = floor(st*rows)+1.;
                        ipos += vec2(.0,floor(u_time*20.*random(ipos.x)));
                        vec2 fpos = fract(st*rows);
                        vec2 center = (.5-fpos);

                        float pct = random(ipos);
                        float glow = (1.-dot(center,center)*3.)*2.0;

                        color.rgb = vec3(0.643,0.851,0.690) * ( randomChar(ipos,fpos) * pct )* 0.5;
                        color.rgb += (vec3(0.027,0.180,0.063) * pct * glow)*0.5;
                    } else {
                        // Roof
                        color.rgb = vec3(0.);
                    }
sources:
    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw
layers:
    earth:
        data:
            source: osm
        draw:
            polygons:
                order: 0
                color: [0.031,0.051,0.035]
    landuse:
        data:
            source: osm
        draw:
            grid:
                order: 1
                color: [0.545,0.565,0.494]

    water:
        data:
            source: osm
        draw:
            tiledCross:
                order: 3
                color: [0,0,0]
            outline:
                order: 2
                style: lines
                color: [0.757,0.784,0.710]
                width: 1px
                tile_edges: false
    roads:
        data:
            source: osm
        draw:
            roads:
                order: 4
                color: [0, 0, 0]
                width: 8
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }
        highway:
            filter:
                kind: highway
            draw:
                roads:
                    order: 5
                    width: 12
                outline:
                    style: lines
                    order: 4
                    color: [1, 1, 1]
                    width: 13
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                roads:
                    color: tan
            rail:
                filter:
                    kind: rail
                visible: false
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    width: 3
    buildings:
        data:
            source: osm
        draw:
            buildings:
                order: 7
                color: [0, 0, 0]
            outline:
                order: 6
                style: lines
                color: [0.643,0.851,0.690]
                width: 1px
                tile_edges: true
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                buildings:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }
                outline:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }

    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, not: { kind: rail }, $zoom: { min: 14 } }
        draw:
            text:
                font:
                    typeface: 14px Courier
                    fill: white
                    stroke: { color: black , width: 6 }
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    typeface: Bold 18px Helvetica
                    fill: black
                    stroke: { color: white , width: 6 }