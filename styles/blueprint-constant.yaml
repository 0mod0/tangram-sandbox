# Author @patriciogv - 2015

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
scene:
    background:
        color: [0.,0.5,0.8]
styles:
    blueprint:
        base: polygons
        shaders:
            blocks:
                global: |
                    // GridTile
                    //=============================
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    float TileGrid(float res){
                        vec2 st = TileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.2;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                    // Grain
                    //=============================
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    float grain(vec2 pos){
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                    // BluePrint Gradiant+Grain
                    //=============================
                    vec3 BluePrint(vec2 _pos){
                        vec2 st = _pos/u_resolution.xy-vec2(.5);
                        return mix(  vec3(0.,0.5,0.8), vec3(0.,0.0,0.3), dot(st,st) + (fbm(_pos*0.6)*0.1) );
                    }
                position: |
                    // GridTile
                    v_pos = a_position;
                filter: |
                    color.rgb += BluePrint(gl_FragCoord.xy);
    base:
        base: polygons
        mix: blueprint
        lighting: false
        shaders:
            blocks:
                color: |
                    color.rgb += TileGrid()*.2;

    buildings:
        base: polygons
        mix: blueprint
        texcoords: true
        lighting: false
        shaders:
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    if (dot(v_normal,vec3(0.,0.,1.)) == 0.0){
                        float lineWidth = 0.003*(u_tile_origin.z/20.0);
                        color.rgb = 1.0-vec3(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    }
    buildingsLines:
        base: lines
        mix: blueprint
        lighting: false
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                filter: |
                    color.rgb = mix(BluePrint(gl_FragCoord.xy),
                                    vec3(1.),
                                    min(max(0.001,(u_map_position.z-13.))/3.,1.0) );
    roads:
        base: lines
        mix: blueprint
        lighting: false
        texcoords: true
        shaders:
            blocks:
                color: |
                    float lineWidth = 0.1;
                    float pct = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    color.rgb = vec3(0.14+pct*0.1); 
sources:
    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
layers:
    water:
        data: { source: osm }
        draw:
            base:
                order: 3
                color: [.1,.1,.1]
    earth:
        data: { source: osm }
        draw:
            lines:
                order: 4
                width: 1.5px
                color: '#C1D3DC' 
            base:
                order: 0
                color: [0.080,0.080,0.080]
    landuse:
        data: { source: osm }
        draw:
            lines:
                order: 2
                width: 0.5px
                color: white 
            base:
                order: 1
                color: [0.116,0.116,0.116]
    roads:
        data: { source: osm }
        properties: { width: 3 }
        draw:
            roads:
                order: 4
                color: '#C1D3DC'
                width: 6
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: 5
                color: [.05,.05,0.05]
            baseline:
                style: lines
                order: 5
                width: [[12, .1px], [18, 0.5m]]
                color: '#C1D3DC'
        extruded:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 6
                    color: white
                    width: [[12, .1px], [14, 0.1px], [15, 0.5px], [17, 1.0px], [18, 1px]]
                    extrude: true
    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, aeroway: false, tunnel: false, railway: false, not: { kind: rail } }

        highway:
            filter: { kind: highway, $zoom: { min: 13 } }
            draw:
                text:
                    font:
                        fill: white
                        typeface: 100 16px Helvetica
        not_highway:
            filter: { not: { kind: highway }, $zoom: { min: 13 } }
            draw:
                text:
                    font:
                        fill: [0.940,0.958,0.966]
                        typeface: 100 12px Helvetica