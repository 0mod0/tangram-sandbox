# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 300px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    water:
        extends: polygons
        animated: true
        material:
            ambient: 0.8
            diffuse: 1
            specular: 1
            shininess: 2.0
        shaders:
            blocks:
                globals: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    float random(in vec2 _st){ 
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))* 
                            43758.5453123);
                    }

                    float random(in vec3 _st){ 
                        return fract(sin(dot(_st.xyz,
                                             vec3(12.9898,78.233,32.4355)))* 
                            43758.5453123);
                    }

                    float noise (in vec2 _st){
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);

                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                color: |
                    vec2 pos = v_world_position.xy*0.1;
                    float t = u_time*0.009;
                    vec2 ipos = floor(pos);
                    float rnd = random(ipos+t);
                    g_material.diffuse.rgb = vec3(0.9+rnd*rnd*rnd);
    floor:
        extends: polygons
        material:
            ambient: 0.8
            diffuse: 1
            specular: 1
            shininess: 2.0
        shaders:
            blocks:
                globals: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    float random(in vec2 _st){ 
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))* 
                            43758.5453123);
                    }

                    float noise (in vec2 _st){
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);

                        // Four corners in 2D of a tile
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }

                    float fbm ( in vec2 _st) {
                        float v = 0.0;
                        float a = 0.5;
                        vec2 shift = vec2(100.0);
                        mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
                        for (int i = 0; i < 5; ++i) {
                            v += a * noise(_st);
                            _st = rot * _st * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                color: |
                    float b = getBrightness(color.rgb);
                    vec2 pos = v_world_position.xy*0.1;
                    float rnd = fbm(pos);
                    g_material.diffuse.rgb = vec3(0.9+rnd*rnd*rnd);
    walls:
        extends: polygons
        material:
            ambient: 0.8
            diffuse: 1
            specular: 1
            shininess: 2.0
        shaders:
            blocks:
                globals: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    float random(in vec2 _st){ 
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))* 
                            43758.5453123);
                    }

                    float random(in vec3 _st){ 
                        return fract(sin(dot(_st.xyz,
                                             vec3(12.9898,78.233,32.4355)))* 
                            43758.5453123);
                    }
                color: |
                    vec3 pos = v_world_position.xyz*0.5;
                    vec3 ipos = floor(pos);
                    float rnd = random(ipos);
                    g_material.diffuse.rgb = vec3(0.9+rnd*rnd*rnd);
                    

sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        data:
            source: osm
            layer: earth
        style:
            order: 0
            color: '#ddeeee'
    landuse:
        data:
            source: osm
            layer: landuse
        style:
            name: floor
            order: 1
            color: [0.502,0.369,0.494]
            interactive: true

    water:
        data:
            source: osm
            layer: water
        style:
            name: water
            order: 2
            color: '#88bbee'

    roads:
        data:
            source: osm
            layer: roads
        style:
            name: floor
            order: 3
            color: gray    
            width: 8
        highway:
            filter:
                kind: highway
            style:
                color: [0.855,0.463,0.255]
                width: 12
                outline:
                    color: grey
                    width: 3
        tunnel:
            filter:
                is_tunnel: yes
            style:
                color: tan
            rail:
                filter:
                    kind: rail
                style:
                    width: 0
        minor_road:
            filter:
                kind: minor_road
            style:
                color: lightgrey
                width: 5
        path:
            filter:
                kind: path
            style:
                color: [0.8, 0.8, 0.8]
                width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            style:
                color: pink
                width: 3
    
    buildings:
        data:
            source: osm
            layer: buildings
        style:
            name: walls
            order: 4
            color: Style.color.pseudoRandomColor()
            extrude: true