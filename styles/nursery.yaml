# Author @patriciogv - 2015

cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    floor:
        extends: polygons
        material:
            normal:
                texture: imgs/normal-0001.jpg
                mapping: planar
                scale: 0.02
            ambient: 0.8
            diffuse: 1
            specular: 0
    walls:
        extends: polygons
        texcoords: true
        material:
            normal:
                texture: imgs/normal-0001.jpg
                mapping: triplanar
                scale: 0.02
            ambient: 0.8
            diffuse: 1
            specular: 0
        shaders:
            blocks:
                globals: |
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    vec2 rotate2D(vec2 _st, float _angle){
                      _st -= 0.5;
                      _st =  mat2(cos(_angle),-sin(_angle),
                                  sin(_angle),cos(_angle)) * _st;
                      _st += 0.5;
                      return _st;
                    }

                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }

                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }

                    float shape(float _radius, float _shape){
                      return 1.-smoothstep(_shape-(_shape*0.01),_shape+(_shape*0.01),_radius);
                    }

                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      _radius *= 0.75;
                      return 1.-smoothstep(_radius-(_radius*0.01),_radius+(_radius*0.01),dot(pos,pos)*3.14);
                    }

                    float nuts(in vec2 st) {

                        float rows = 10.0;
                        vec2 pos = brickTile(st,rows);

                        float angle = 3.1415*0.25;

                        if (fract(st.y * 0.5 * rows) > 0.5){
                            angle *= -1.0;
                        }

                        pos = rotate2D(pos,angle);

                        pos *= 2.0;
                        float pct = (1.0+cos(3.1415*pos.x))*0.5;

                        return clamp(1.0-smoothstep( 0.5,0.6, pow(pct,pos.y) ) * 1.0-smoothstep( 0.79,0.81, pow(pct,2.0-pos.y )),0.0,1.0);
                    }

                    float flower(in vec2 st){
                        vec2 pos = vec2(0.5)-st;

                        float r = length(pos)*2.0;
                        float a = atan(pos.y,pos.x);

                        float shape1 = 0.5-0.2*cos(a*5.0);
                        float shape2 = 0.15-0.03*cos(a*5.0);

                        float pct = shape(r,shape1);
                        pct -= shape(r,shape2);
                        pct += circle(st,0.0005);

                        return pct;
                    }

                    float snowFlake(in vec2 st){
                        vec2 pos = vec2(0.5)-st;

                        float r = length(pos)*2.0;
                        float a = atan(pos.y,pos.x);

                        //float f = abs(cos(a*12.)*sin(a*3.))*.8+.1;
                        float f = abs(cos(a*12.)*sin(a*3.))*.6+0.15;
                        
                        return 1.0-shape(r,f);
                    }

                    float stripes(in vec2 _pos, float _angle, float _brigtness){
                        float scale = 20.0;
                        _pos *= scale;
                        _pos = rotate2D(_pos, _angle );
                        return 1.0-smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                    
                color: |
                    float b = random(getBrightness(color.rgb));

                    vec2 st = v_texcoord;
                    if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                        st = fract(v_world_position.xy*0.05);
                    } 
                    float pattern = 0.0;

                    if (b > 0.85){
                        pattern = nuts(st);
                    } else if (b > 0.75){
                        st = brickTile(st,4.);
                        pattern = flower(st);
                    } else if (b > 0.6){
                        st = brickTile(st,3.);
                        pattern = snowFlake(st);
                    } else if (b > 0.4){
                        pattern = stripes(st, 3.1415*0.25, 0.25);
                    } else if (b > 0.2){
                        pattern = 1.0-stripes(st, -3.1415*0.25, 0.25);
                    } else {
                        st = tile(st,5.);
                        pattern = 1.0-circle(st,0.1);
                    }

                    color.rgb = mix(vec3(1.),color.rgb,pattern);
                    

sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        data:
            source: osm
            layer: earth
        style:
            name: floor
            order: 0
            color: '#ddeeee'
    landuse:
        data:
            source: osm
            layer: landuse
        style:
            name: floor
            order: 1
            color: [0.502,0.369,0.494]
            interactive: true

    water:
        data:
            source: osm
            layer: water
        style:
            name: floor
            order: 2
            color: '#88bbee'

    roads:
        data:
            source: osm
            layer: roads
        style:
            order: 3
            color: gray    
            width: 8
        highway:
            filter:
                kind: highway
            style:
                color: [0.855,0.463,0.255]
                width: 12
                outline:
                    color: grey
                    width: 3
        tunnel:
            filter:
                is_tunnel: yes
            style:
                color: tan
            rail:
                filter:
                    kind: rail
                style:
                    width: 0
        minor_road:
            filter:
                kind: minor_road
            style:
                color: lightgrey
                width: 5
        path:
            filter:
                kind: path
            style:
                color: [0.8, 0.8, 0.8]
                width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            style:
                color: pink
                width: 3
    
    buildings:
        data:
            source: osm
            layer: buildings
        style:
            name: walls
            order: 4
            color: Style.color.pseudoRandomColor()
            extrude: true

    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, $zoom: { min: 14 } }
        style:
            name: text
            order: 5
            font:
                typeface: 12px Helvetica
                fill: white
                stroke: { color: [0.232,0.170,0.229] , width: 3 }
    places:
        data: { source: osm }
        filter: { name: true }
        style:
            order: 6
            name: text
            font:
                typeface: Bold 18px Helvetica
                fill: [0.232,0.170,0.229]
                stroke: { color: white , width: 3 }