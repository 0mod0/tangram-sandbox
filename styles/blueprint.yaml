# Author @patriciogv - 2015

import:
    - http://tangrams.github.io/blocks/color/tools.yaml
    - http://tangrams.github.io/blocks/generative/fbm.yaml
    - http://tangrams.github.io/blocks/grids/grid.yaml
    - http://tangrams.github.io/blocks/functions/map.yaml
    - http://tangrams.github.io/blocks/geometry/dynamic-width.yaml
    - http://tangrams.github.io/blocks/geometry/normal.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc

scene:
    background:
        color: [0.,0.5,0.8]

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]

lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5

global:
    order: function () { return feature.sort_key; }

layers:
    water:
        data: { source: osm }
        draw:
            water:
                order: global.order
                color: [.1,.1,.1]
    earth:
        data: { source: osm }
        draw:
            lines:
                order: global.order
                width: 1.5px
                color: '#C1D3DC' 
            earth:
                order: global.order
                color: [0.080,0.080,0.080]
    landuse:
        data: { source: osm }
        draw:
            lines:
                order: global.order
                width: 0.5px
                color: white 
            landuse:
                order: global.order
                color: [0.116,0.116,0.116]
    roads:
        data: { source: osm }
        filter: { not: { kind: ferry } }
        draw:
            roads:
                order: global.order
                color: '#C1D3DC'
                width: 6
            text:
                font:
                    fill: white
                    family: ['Helvetica Neue', Helvetica, Arial, sans-serif]
                    size: 14px
                    weight: 100
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: global.order
                color: [.05,.05,0.05]
                extrude: true
            baseline:
                style: lines
                order: global.order
                width: [[12, .1px], [18, 0.5m]]
                color: '#C1D3DC'
            buildingsLines:
                order: function () { return feature.sort_key + 1; }
                color: white
                width: [[12, .1px], [14, 0.1px], [15, 0.5px], [17, 1.0px], [18, 1px]]
                extrude: true

styles:
    blueprint:
        base: polygons
        mix: [color-tools, generative-fbm, grids-grid]
        shaders:
            blocks:
                global: |
                    // Fragment Shader function that makes the grid and dust efect
                    // on screen space 
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec3 BluePrint(){
                        vec2 pos = gl_FragCoord.xy;
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        // Interpolate circularly (+ dust FBn noise) this two colors
                        vec3 background = mix(  vec3(0.,0.5,0.8), // Cyan
                                                vec3(0.,0.0,0.3), // Dark blue
                                                dot(st,st) + (fbm(pos*0.6)*0.1) );
                        if (grid(pos,0.01)) { background += vec3(0.05); }
                        if (grid(pos,0.1)) { background += vec3(0.02); }
                        return background;
                    }
                    #endif
                filter: |
                    color.rgb += BluePrint();
    earth:
        base: polygons
        mix: blueprint
    water:
        base: polygons
        mix: blueprint
    landuse:
        base: polygons
        mix: blueprint
    buildings:
        base: polygons
        mix: [blueprint, geometry-normal]
        texcoords: true
        shaders:
            blocks:
                color: |
                    if (isWall()){
                        // Put lines at the edge of walls
                        float lineWidth = 0.003*(u_tile_origin.z/20.0);
                        color.rgb = 1.0-vec3(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    }
    buildingsLines:
        base: lines
        mix: [blueprint, geometry-dynamic-width]
        shaders:
            blocks:
                color: |
                    color.rgb = mix(vec3(0.),
                                    vec3(1.),
                                    min(max(0.001,(u_map_position.z-13.))/3.,1.0) );
    roads:
        base: lines
        mix: blueprint
        texcoords: true
        shaders:
            blocks:
                color: |
                    float lineWidth = 0.1;
                    float pct = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    color.rgb = vec3(0.14+pct*0.1);
