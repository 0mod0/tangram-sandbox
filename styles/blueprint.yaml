# Author @patriciogv - 2015

import:
    - http://tangrams.github.io/blocks/color/tools.yaml
    - http://tangrams.github.io/blocks/generative/fbm.yaml
    - http://tangrams.github.io/blocks/grids/grid.yaml
    - http://tangrams.github.io/blocks/functions/map.yaml
    - http://tangrams.github.io/blocks/geometry/dynamic-height.yaml
    - http://tangrams.github.io/blocks/geometry/dynamic-width.yaml

sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
scene:
    background:
        color: [0.,0.5,0.8]
styles:
    blueprint:
        base: polygons
        mix: [color-tools, generative-fbm, grids-grid]
        shaders:
            blocks:
                global: |
                    // Fragment Shader function that makes the grid and dust efect
                    // on screen space 
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec3 BluePrint(){
                        vec2 pos = gl_FragCoord.xy;
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        // Interpolate circularly (+ dust FBn noise) this two colors
                        vec3 background = mix(  vec3(0.,0.5,0.8), // Cyan
                                                vec3(0.,0.0,0.3), // Dark blue
                                                dot(st,st) + (fbm(pos*0.6)*0.1) );
                        if (grid(pos,0.01)) { background += vec3(0.05); }
                        if (grid(pos,0.1)) { background += vec3(0.02); }
                        return background;
                    }
                    #endif
    base:
        base: polygons
        mix: blueprint
        shaders:
            blocks: 
                filter: |
                    // Apply this bluePrint effect as a final filter
                    color.rgb += BluePrint();
    buildings:
        base: polygons
        mix: [blueprint, geometry-dynamic-height]
        texcoords: true
        shaders:
            blocks:
                color: |
                    if (dot(v_normal,vec3(0.,0.,1.)) == 0.0){
                        // Put lines at the edge of walls
                        float lineWidth = 0.003*(u_tile_origin.z/20.0);
                        color.rgb = 1.0-vec3(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    }
                filter: |
                    // Apply this bluePrint effect as a final filter
                    color.rgb += BluePrint();
    buildingsLines:
        base: lines
        mix: [blueprint, geometry-dynamic-height, geometry-dynamic-width]
        shaders:
            blocks:
                filter: |
                    color.rgb = mix(BluePrint(),
                                    vec3(1.),
                                    min(max(0.001,(u_map_position.z-13.))/3.,1.0) );
    roads:
        base: lines
        mix: blueprint
        texcoords: true
        shaders:
            blocks:
                color: |
                    float lineWidth = 0.1;
                    float pct = 1.0-(step(lineWidth,v_texcoord.x)-step(1.0-lineWidth,v_texcoord.x));
                    color.rgb = vec3(0.14+pct*0.1);
                filter: |
                    // Apply this bluePrint effect as a final filter
                    color.rgb += BluePrint();

layers:
    water:
        data: { source: osm }
        draw:
            base:
                order: 3
                color: [.1,.1,.1]
    earth:
        data: { source: osm }
        draw:
            lines:
                order: 4
                width: 1.5px
                color: '#C1D3DC' 
            base:
                order: 0
                color: [0.080,0.080,0.080]
    landuse:
        data: { source: osm }
        draw:
            lines:
                order: 2
                width: 0.5px
                color: white 
            base:
                order: 1
                color: [0.116,0.116,0.116]
    roads:
        data: { source: osm }
        filter: { not: { kind: ferry } }
        draw:
            roads:
                order: 4
                color: '#C1D3DC'
                width: 6
    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            buildings:
                order: 5
                color: [.05,.05,0.05]
            baseline:
                style: lines
                order: 5
                width: [[12, .1px], [18, 0.5m]]
                color: '#C1D3DC'
        extruded:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 6
                    color: white
                    width: [[12, .1px], [14, 0.1px], [15, 0.5px], [17, 1.0px], [18, 1px]]
                    extrude: true
    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, aeroway: false, tunnel: false, railway: false, not: { kind: rail } }
        highway:
            filter: { kind: highway, $zoom: { min: 13 } }
            draw:
                text:
                    font:
                        fill: white
                        family: ['Helvetica Neue', Helvetica, Arial, sans-serif]
                        size: 14px
                        weight: 100
        not_highway:
            filter: { not: { kind: highway }, $zoom: { min: 17 } }
            draw:
                text:
                    font:
                        fill: white
                        size: 12px
                        family: ['Helvetica Neue', Helvetica, Arial, sans-serif]
                        weight: 100
                        style: italic
