# Terrain environment map demo

scene:
    background:
        color: white
sources:
    osm: 
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
        rasters: [normals]
    normals:
        type: Raster
        url: https://terrain-preview.mapzen.com/normal/{z}/{x}/{y}.png
        max_zoom: 15

styles:
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords () {
                        return fract(v_pos.xy);
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                } else {
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
                    float cross(in vec2 st, float _size){
                        return  rect(st, vec2(_size*0.5,_size*0.125)) +
                                rect(st, vec2(_size*0.125,_size*0.5));
                    }
                    float cross(in vec2 st, vec2 _size){
                        return  rect(st, vec2(_size.x*0.5,_size.y*0.125)) +
                                rect(st, vec2(_size.y*0.125,_size.x*0.5));
                    }
    line-pattern:
        base: lines
        texcoords: true
        animated: true
        shaders:
            blocks:
                global: |
                    float plot(float pos, float pct, float size){
                         return smoothstep( pct-size*.5, pct, pos) - 
                                smoothstep( pct, pct+size*.5, pos);
                    }
                color: |
                    float t = u_time*-1.246;
                    vec2 st = fract(v_texcoord.xy*0.5);
                    st.x *= sign(st.x-0.25);
                    st.y += step(0.25,st.x)*.5;
                    color.rgb += step(.5,fract(t+st.x+st.y));
                    float outline = 0.342;
                    color.rgb = mix(color.rgb, vec3(1.0), step(outline,abs(v_texcoord.x-.5)));
    terrain:
        base: polygons
        mix: [space-tile, functions-map, shapes-cross]
        raster: normal
        shaders:
            blocks:   
                color: |
                
                    // Brightness
                    float brightness = dot(normal,vec3(0.690,-0.750,0.807));
                    // Fade Brightness away when get close to floor
                    // brightness = mix(brightness,
                    //                 0.010,
                    //                 map(u_map_position.z, 14., 22., 0.1, 1., true));
                    brightness = 1.-brightness;
                                    
                    // Scale 
                    float scale = map(floor(u_map_position.z), 8., 22., 0.0000001, .1, true);
                    vec2 st = worldPosition().xy*scale;//4.434;
                    
                    
                    // PATERNS
                    float pct = 0.0;
                    
                    // Stripes
                    // pct = step(brightness*3.212,cos((st.x+st.y)));
                    
                    // Cell patterns
                    st.x += step(1., mod(st.y,2.0)) *.5;
                    vec2 f_st = fract(st);
                    f_st -= .5;
                    
                    // Dots
                    // pct = step(brightness*1.704,1.-dot(f_st,f_st)*2.912);
                    
                    // Lines
                    // pct = rect(f_st+0.5,vec2(0.704,brightness*0.472));
                    
                    // Cross
                    pct = cross(f_st+0.5,brightness*6.128,brightness*2.604);
                    
                    color.rgb = mix(v_color.rgb,vec3(0.),pct);
                
layers:
    earth:
        data: { source: osm}
        draw:
            terrain:
                order: 0
                color: white

    landuse:
        data: { source: osm}
        draw:
            terrain:
                order: 1
                color: white

    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: white

    roads:
        data: { source: osm }
        filter: { not: { kind: ferry } }
        draw:
            line-pattern:
                order: 4
                color: black
                width: 20